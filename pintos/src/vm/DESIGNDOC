            +---------------------------+
		    |	    	EE415        	|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT   	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.
20214926 HINRICHS JEPPE
20214943 MAO YIFAN

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct vm_entry{
    void *vaddr;                         //virtual address.
    bool writable                        //flag to mark writable.
    bool pinned;                         //flag

    enum vme_type type;                  // list the types for vme_type
    bool is_loaded;                      // flag to make loaded
    struct file* file; 

    size_t offset;
    size_t read_bytes;
    size_t zero_bytes;

    size_t swap_slot;
    struct list_elem mmap_elem;
    struct hash_elem elem;
};

struct thread{
    ...
    struct hash vm;                   // hash table to manage virtual address space of thread
    struct file* binary_file;         
    struct list mmap_list;
    ...
}
---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.
1) Two map structures, frame table and supplementary page table are created.
2) The frame table is used to track physical pages and the supplementary page is used to track virtual pages.
3) A function is used to translate the virtual address into kernel address.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
1) The aliases, which is two or more pages refering to the same frame may cause a collision.
2) To be more specific, when aliases happened, the dirty bits are only updated in one page table entry while the dirty bits for other aliases are not updated.
3) To avoid it, we only allow to use user pages' address. In this case, the kernel pages' address will never be modified.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?
There are flags to mark whether the frame is locked or not.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?
1) The supplemental page table is used to deal with virtual-to-physical mappings.
2) Although it's not necessary to implement four completely distinct data structures. It's would be easier to understand with creating the supplemental page table individually.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct page {
    void *kaddr;                          // physical address for page
    struct vm_entry *vme;                 // to the vpage object which physical page is mapped
    struct thread *thread;                // to belonging thread
    struct list_elem lru;                 // LRU list linking field
};

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
1) Choose a frame to evict with function.
2) Remove references to this frame from any page table that refers to it.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
1) The frame table entry for Q will be removed.
2) We will allocate the frame that is not in use.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
1) Compare the fault for that invalid virtual address with stack pointer.
2) If it's higher than stack pointer, then stack is extended one page.
3) If it's lower than stack pointer, there 4 bytes page fault and 32 bytes page fault.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
1) There are four conditions to cause deadlock, they are:
1.1) No preemption.
1.2) Hold and wait.
1.3) Mutual exclusion.
1.4) Circular waiting.
2) Simply speaking, the deadlock is threads hold one lock and wait for another lock.
To avoid this problem, we use individual lock in each part. So there is no such a case for waiting another lock.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
1) A lock is used in each supplement page table entry. The lock helps us make sure there is no collision.
2) In this case, if Q is going to access it, it will wait for the lock.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
1) The flag is used to help us solve this problem.
2) It is set as false before reading.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?
1) Check the page first.
2) Check the flag, where the flag reflect whether the page can be evicted or not.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.
1) We use many locks to make high parallelism.
2) To avoid deadlock, we implement as we discussed in B5.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct mmap_file{
    int mapid;
    struct file* file;
    struct list_elem elem;
    struct list vme_list;                // list a list for vme

};

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
1) Each process owns it's hash table for memory mapped files.
2) The hash table is initialized at the begining.
3) Check the dirty bits and free or skip the page depend on dirty bits.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
1) Check the entry of virtual address.
2) If the virtual address once enter it, this means a new file mapping overlaps any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
1) We share the data structure.
2) There is not so much confusion by implementing sharing data structure.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?